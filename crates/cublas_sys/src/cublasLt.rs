/* automatically generated by rust-bindgen 0.59.2 */

pub const CUBLASLT_NUMERICAL_IMPL_FLAGS_FMA: u32 = 1;
pub const CUBLASLT_NUMERICAL_IMPL_FLAGS_HMMA: u32 = 2;
pub const CUBLASLT_NUMERICAL_IMPL_FLAGS_IMMA: u32 = 4;
pub const CUBLASLT_NUMERICAL_IMPL_FLAGS_DMMA: u32 = 8;
pub const CUBLASLT_NUMERICAL_IMPL_FLAGS_TENSOR_OP_MASK: u32 = 254;
pub const CUBLASLT_NUMERICAL_IMPL_FLAGS_OP_TYPE_MASK: u32 = 255;
pub const CUBLASLT_NUMERICAL_IMPL_FLAGS_ACCUMULATOR_16F: u32 = 256;
pub const CUBLASLT_NUMERICAL_IMPL_FLAGS_ACCUMULATOR_32F: u32 = 512;
pub const CUBLASLT_NUMERICAL_IMPL_FLAGS_ACCUMULATOR_64F: u32 = 1024;
pub const CUBLASLT_NUMERICAL_IMPL_FLAGS_ACCUMULATOR_32I: u32 = 2048;
pub const CUBLASLT_NUMERICAL_IMPL_FLAGS_ACCUMULATOR_TYPE_MASK: u32 = 65280;
pub const CUBLASLT_NUMERICAL_IMPL_FLAGS_INPUT_16F: u32 = 65536;
pub const CUBLASLT_NUMERICAL_IMPL_FLAGS_INPUT_16BF: u32 = 131072;
pub const CUBLASLT_NUMERICAL_IMPL_FLAGS_INPUT_TF32: u32 = 262144;
pub const CUBLASLT_NUMERICAL_IMPL_FLAGS_INPUT_32F: u32 = 524288;
pub const CUBLASLT_NUMERICAL_IMPL_FLAGS_INPUT_64F: u32 = 1048576;
pub const CUBLASLT_NUMERICAL_IMPL_FLAGS_INPUT_8I: u32 = 2097152;
pub const CUBLASLT_NUMERICAL_IMPL_FLAGS_OP_INPUT_TYPE_MASK: u32 = 16711680;
pub const CUBLASLT_NUMERICAL_IMPL_FLAGS_GAUSSIAN: u64 = 4294967296;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUstream_st {
    _unused: [u8; 0],
}
pub type cudaStream_t = *mut CUstream_st;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cudaDataType_t {
    CUDA_R_16F = 2,
    CUDA_C_16F = 6,
    CUDA_R_16BF = 14,
    CUDA_C_16BF = 15,
    CUDA_R_32F = 0,
    CUDA_C_32F = 4,
    CUDA_R_64F = 1,
    CUDA_C_64F = 5,
    CUDA_R_4I = 16,
    CUDA_C_4I = 17,
    CUDA_R_4U = 18,
    CUDA_C_4U = 19,
    CUDA_R_8I = 3,
    CUDA_C_8I = 7,
    CUDA_R_8U = 8,
    CUDA_C_8U = 9,
    CUDA_R_16I = 20,
    CUDA_C_16I = 21,
    CUDA_R_16U = 22,
    CUDA_C_16U = 23,
    CUDA_R_32I = 10,
    CUDA_C_32I = 11,
    CUDA_R_32U = 12,
    CUDA_C_32U = 13,
    CUDA_R_64I = 24,
    CUDA_C_64I = 25,
    CUDA_R_64U = 26,
    CUDA_C_64U = 27,
}
pub use self::cudaDataType_t as cudaDataType;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum libraryPropertyType_t {
    MAJOR_VERSION = 0,
    MINOR_VERSION = 1,
    PATCH_LEVEL = 2,
}
pub use self::libraryPropertyType_t as libraryPropertyType;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cublasStatus_t {
    CUBLAS_STATUS_SUCCESS = 0,
    CUBLAS_STATUS_NOT_INITIALIZED = 1,
    CUBLAS_STATUS_ALLOC_FAILED = 3,
    CUBLAS_STATUS_INVALID_VALUE = 7,
    CUBLAS_STATUS_ARCH_MISMATCH = 8,
    CUBLAS_STATUS_MAPPING_ERROR = 11,
    CUBLAS_STATUS_EXECUTION_FAILED = 13,
    CUBLAS_STATUS_INTERNAL_ERROR = 14,
    CUBLAS_STATUS_NOT_SUPPORTED = 15,
    CUBLAS_STATUS_LICENSE_ERROR = 16,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cublasComputeType_t {
    CUBLAS_COMPUTE_16F = 64,
    CUBLAS_COMPUTE_16F_PEDANTIC = 65,
    CUBLAS_COMPUTE_32F = 68,
    CUBLAS_COMPUTE_32F_PEDANTIC = 69,
    CUBLAS_COMPUTE_32F_FAST_16F = 74,
    CUBLAS_COMPUTE_32F_FAST_16BF = 75,
    CUBLAS_COMPUTE_32F_FAST_TF32 = 77,
    CUBLAS_COMPUTE_64F = 70,
    CUBLAS_COMPUTE_64F_PEDANTIC = 71,
    CUBLAS_COMPUTE_32I = 72,
    CUBLAS_COMPUTE_32I_PEDANTIC = 73,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
pub type FILE = _iobuf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cublasLtContext {
    _unused: [u8; 0],
}
pub type cublasLtHandle_t = *mut cublasLtContext;
extern "C" {
    pub fn cublasLtCreate(lightHandle: *mut cublasLtHandle_t) -> cublasStatus_t;
}
extern "C" {
    pub fn cublasLtDestroy(lightHandle: cublasLtHandle_t) -> cublasStatus_t;
}
extern "C" {
    pub fn cublasLtGetStatusName(status: cublasStatus_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cublasLtGetStatusString(status: cublasStatus_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cublasLtGetVersion() -> usize;
}
extern "C" {
    pub fn cublasLtGetCudartVersion() -> usize;
}
extern "C" {
    pub fn cublasLtGetProperty(
        type_: libraryPropertyType,
        value: *mut ::std::os::raw::c_int,
    ) -> cublasStatus_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cublasLtMatrixLayoutOpaque_t {
    pub data: [u64; 8usize],
}
pub type cublasLtMatrixLayout_t = *mut cublasLtMatrixLayoutOpaque_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cublasLtMatmulAlgo_t {
    pub data: [u64; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cublasLtMatmulDescOpaque_t {
    pub data: [u64; 11usize],
}
pub type cublasLtMatmulDesc_t = *mut cublasLtMatmulDescOpaque_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cublasLtMatrixTransformDescOpaque_t {
    pub data: [u64; 8usize],
}
pub type cublasLtMatrixTransformDesc_t = *mut cublasLtMatrixTransformDescOpaque_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cublasLtMatmulPreferenceOpaque_t {
    pub data: [u64; 10usize],
}
pub type cublasLtMatmulPreference_t = *mut cublasLtMatmulPreferenceOpaque_t;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cublasLtMatmulTile_t {
    CUBLASLT_MATMUL_TILE_UNDEFINED = 0,
    CUBLASLT_MATMUL_TILE_8x8 = 1,
    CUBLASLT_MATMUL_TILE_8x16 = 2,
    CUBLASLT_MATMUL_TILE_16x8 = 3,
    CUBLASLT_MATMUL_TILE_8x32 = 4,
    CUBLASLT_MATMUL_TILE_16x16 = 5,
    CUBLASLT_MATMUL_TILE_32x8 = 6,
    CUBLASLT_MATMUL_TILE_8x64 = 7,
    CUBLASLT_MATMUL_TILE_16x32 = 8,
    CUBLASLT_MATMUL_TILE_32x16 = 9,
    CUBLASLT_MATMUL_TILE_64x8 = 10,
    CUBLASLT_MATMUL_TILE_32x32 = 11,
    CUBLASLT_MATMUL_TILE_32x64 = 12,
    CUBLASLT_MATMUL_TILE_64x32 = 13,
    CUBLASLT_MATMUL_TILE_32x128 = 14,
    CUBLASLT_MATMUL_TILE_64x64 = 15,
    CUBLASLT_MATMUL_TILE_128x32 = 16,
    CUBLASLT_MATMUL_TILE_64x128 = 17,
    CUBLASLT_MATMUL_TILE_128x64 = 18,
    CUBLASLT_MATMUL_TILE_64x256 = 19,
    CUBLASLT_MATMUL_TILE_128x128 = 20,
    CUBLASLT_MATMUL_TILE_256x64 = 21,
    CUBLASLT_MATMUL_TILE_64x512 = 22,
    CUBLASLT_MATMUL_TILE_128x256 = 23,
    CUBLASLT_MATMUL_TILE_256x128 = 24,
    CUBLASLT_MATMUL_TILE_512x64 = 25,
    CUBLASLT_MATMUL_TILE_64x96 = 26,
    CUBLASLT_MATMUL_TILE_96x64 = 27,
    CUBLASLT_MATMUL_TILE_96x128 = 28,
    CUBLASLT_MATMUL_TILE_128x160 = 29,
    CUBLASLT_MATMUL_TILE_160x128 = 30,
    CUBLASLT_MATMUL_TILE_192x128 = 31,
    CUBLASLT_MATMUL_TILE_END = 32,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cublasLtMatmulStages_t {
    CUBLASLT_MATMUL_STAGES_UNDEFINED = 0,
    CUBLASLT_MATMUL_STAGES_16x1 = 1,
    CUBLASLT_MATMUL_STAGES_16x2 = 2,
    CUBLASLT_MATMUL_STAGES_16x3 = 3,
    CUBLASLT_MATMUL_STAGES_16x4 = 4,
    CUBLASLT_MATMUL_STAGES_16x5 = 5,
    CUBLASLT_MATMUL_STAGES_16x6 = 6,
    CUBLASLT_MATMUL_STAGES_32x1 = 7,
    CUBLASLT_MATMUL_STAGES_32x2 = 8,
    CUBLASLT_MATMUL_STAGES_32x3 = 9,
    CUBLASLT_MATMUL_STAGES_32x4 = 10,
    CUBLASLT_MATMUL_STAGES_32x5 = 11,
    CUBLASLT_MATMUL_STAGES_32x6 = 12,
    CUBLASLT_MATMUL_STAGES_64x1 = 13,
    CUBLASLT_MATMUL_STAGES_64x2 = 14,
    CUBLASLT_MATMUL_STAGES_64x3 = 15,
    CUBLASLT_MATMUL_STAGES_64x4 = 16,
    CUBLASLT_MATMUL_STAGES_64x5 = 17,
    CUBLASLT_MATMUL_STAGES_64x6 = 18,
    CUBLASLT_MATMUL_STAGES_128x1 = 19,
    CUBLASLT_MATMUL_STAGES_128x2 = 20,
    CUBLASLT_MATMUL_STAGES_128x3 = 21,
    CUBLASLT_MATMUL_STAGES_128x4 = 22,
    CUBLASLT_MATMUL_STAGES_128x5 = 23,
    CUBLASLT_MATMUL_STAGES_128x6 = 24,
    CUBLASLT_MATMUL_STAGES_32x10 = 25,
    CUBLASLT_MATMUL_STAGES_8x4 = 26,
    CUBLASLT_MATMUL_STAGES_16x10 = 27,
    CUBLASLT_MATMUL_STAGES_8x5 = 28,
    CUBLASLT_MATMUL_STAGES_16x80 = 29,
    CUBLASLT_MATMUL_STAGES_64x80 = 30,
    CUBLASLT_MATMUL_STAGES_END = 31,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cublasLtPointerMode_t {
    CUBLASLT_POINTER_MODE_HOST = 0,
    CUBLASLT_POINTER_MODE_DEVICE = 1,
    CUBLASLT_POINTER_MODE_DEVICE_VECTOR = 2,
    CUBLASLT_POINTER_MODE_ALPHA_DEVICE_VECTOR_BETA_ZERO = 3,
    CUBLASLT_POINTER_MODE_ALPHA_DEVICE_VECTOR_BETA_HOST = 4,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cublasLtPointerModeMask_t {
    CUBLASLT_POINTER_MODE_MASK_NO_FILTERING = 0,
    CUBLASLT_POINTER_MODE_MASK_HOST = 1,
    CUBLASLT_POINTER_MODE_MASK_DEVICE = 2,
    CUBLASLT_POINTER_MODE_MASK_DEVICE_VECTOR = 4,
    CUBLASLT_POINTER_MODE_MASK_ALPHA_DEVICE_VECTOR_BETA_ZERO = 8,
    CUBLASLT_POINTER_MODE_MASK_ALPHA_DEVICE_VECTOR_BETA_HOST = 16,
}
pub type cublasLtNumericalImplFlags_t = u64;
extern "C" {
    pub fn cublasLtMatmul(
        lightHandle: cublasLtHandle_t,
        computeDesc: cublasLtMatmulDesc_t,
        alpha: *const ::std::os::raw::c_void,
        A: *const ::std::os::raw::c_void,
        Adesc: cublasLtMatrixLayout_t,
        B: *const ::std::os::raw::c_void,
        Bdesc: cublasLtMatrixLayout_t,
        beta: *const ::std::os::raw::c_void,
        C: *const ::std::os::raw::c_void,
        Cdesc: cublasLtMatrixLayout_t,
        D: *mut ::std::os::raw::c_void,
        Ddesc: cublasLtMatrixLayout_t,
        algo: *const cublasLtMatmulAlgo_t,
        workspace: *mut ::std::os::raw::c_void,
        workspaceSizeInBytes: usize,
        stream: cudaStream_t,
    ) -> cublasStatus_t;
}
extern "C" {
    pub fn cublasLtMatrixTransform(
        lightHandle: cublasLtHandle_t,
        transformDesc: cublasLtMatrixTransformDesc_t,
        alpha: *const ::std::os::raw::c_void,
        A: *const ::std::os::raw::c_void,
        Adesc: cublasLtMatrixLayout_t,
        beta: *const ::std::os::raw::c_void,
        B: *const ::std::os::raw::c_void,
        Bdesc: cublasLtMatrixLayout_t,
        C: *mut ::std::os::raw::c_void,
        Cdesc: cublasLtMatrixLayout_t,
        stream: cudaStream_t,
    ) -> cublasStatus_t;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cublasLtOrder_t {
    CUBLASLT_ORDER_COL = 0,
    CUBLASLT_ORDER_ROW = 1,
    CUBLASLT_ORDER_COL32 = 2,
    CUBLASLT_ORDER_COL4_4R2_8C = 3,
    CUBLASLT_ORDER_COL32_2R_4R4 = 4,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cublasLtMatrixLayoutAttribute_t {
    CUBLASLT_MATRIX_LAYOUT_TYPE = 0,
    CUBLASLT_MATRIX_LAYOUT_ORDER = 1,
    CUBLASLT_MATRIX_LAYOUT_ROWS = 2,
    CUBLASLT_MATRIX_LAYOUT_COLS = 3,
    CUBLASLT_MATRIX_LAYOUT_LD = 4,
    CUBLASLT_MATRIX_LAYOUT_BATCH_COUNT = 5,
    CUBLASLT_MATRIX_LAYOUT_STRIDED_BATCH_OFFSET = 6,
    CUBLASLT_MATRIX_LAYOUT_PLANE_OFFSET = 7,
}
extern "C" {
    pub fn cublasLtMatrixLayoutInit_internal(
        matLayout: cublasLtMatrixLayout_t,
        size: usize,
        type_: cudaDataType,
        rows: u64,
        cols: u64,
        ld: i64,
    ) -> cublasStatus_t;
}
extern "C" {
    pub fn cublasLtMatrixLayoutCreate(
        matLayout: *mut cublasLtMatrixLayout_t,
        type_: cudaDataType,
        rows: u64,
        cols: u64,
        ld: i64,
    ) -> cublasStatus_t;
}
extern "C" {
    pub fn cublasLtMatrixLayoutDestroy(matLayout: cublasLtMatrixLayout_t) -> cublasStatus_t;
}
extern "C" {
    pub fn cublasLtMatrixLayoutSetAttribute(
        matLayout: cublasLtMatrixLayout_t,
        attr: cublasLtMatrixLayoutAttribute_t,
        buf: *const ::std::os::raw::c_void,
        sizeInBytes: usize,
    ) -> cublasStatus_t;
}
extern "C" {
    pub fn cublasLtMatrixLayoutGetAttribute(
        matLayout: cublasLtMatrixLayout_t,
        attr: cublasLtMatrixLayoutAttribute_t,
        buf: *mut ::std::os::raw::c_void,
        sizeInBytes: usize,
        sizeWritten: *mut usize,
    ) -> cublasStatus_t;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cublasLtMatmulDescAttributes_t {
    CUBLASLT_MATMUL_DESC_COMPUTE_TYPE = 0,
    CUBLASLT_MATMUL_DESC_SCALE_TYPE = 1,
    CUBLASLT_MATMUL_DESC_POINTER_MODE = 2,
    CUBLASLT_MATMUL_DESC_TRANSA = 3,
    CUBLASLT_MATMUL_DESC_TRANSB = 4,
    CUBLASLT_MATMUL_DESC_TRANSC = 5,
    CUBLASLT_MATMUL_DESC_FILL_MODE = 6,
    CUBLASLT_MATMUL_DESC_EPILOGUE = 7,
    CUBLASLT_MATMUL_DESC_BIAS_POINTER = 8,
    CUBLASLT_MATMUL_DESC_BIAS_BATCH_STRIDE = 10,
    CUBLASLT_MATMUL_DESC_EPILOGUE_AUX_POINTER = 11,
    CUBLASLT_MATMUL_DESC_EPILOGUE_AUX_LD = 12,
    CUBLASLT_MATMUL_DESC_EPILOGUE_AUX_BATCH_STRIDE = 13,
    CUBLASLT_MATMUL_DESC_ALPHA_VECTOR_BATCH_STRIDE = 14,
}
extern "C" {
    pub fn cublasLtMatmulDescInit_internal(
        matmulDesc: cublasLtMatmulDesc_t,
        size: usize,
        computeType: cublasComputeType_t,
        scaleType: cudaDataType_t,
    ) -> cublasStatus_t;
}
extern "C" {
    pub fn cublasLtMatmulDescCreate(
        matmulDesc: *mut cublasLtMatmulDesc_t,
        computeType: cublasComputeType_t,
        scaleType: cudaDataType_t,
    ) -> cublasStatus_t;
}
extern "C" {
    pub fn cublasLtMatmulDescDestroy(matmulDesc: cublasLtMatmulDesc_t) -> cublasStatus_t;
}
extern "C" {
    pub fn cublasLtMatmulDescSetAttribute(
        matmulDesc: cublasLtMatmulDesc_t,
        attr: cublasLtMatmulDescAttributes_t,
        buf: *const ::std::os::raw::c_void,
        sizeInBytes: usize,
    ) -> cublasStatus_t;
}
extern "C" {
    pub fn cublasLtMatmulDescGetAttribute(
        matmulDesc: cublasLtMatmulDesc_t,
        attr: cublasLtMatmulDescAttributes_t,
        buf: *mut ::std::os::raw::c_void,
        sizeInBytes: usize,
        sizeWritten: *mut usize,
    ) -> cublasStatus_t;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cublasLtMatrixTransformDescAttributes_t {
    CUBLASLT_MATRIX_TRANSFORM_DESC_SCALE_TYPE = 0,
    CUBLASLT_MATRIX_TRANSFORM_DESC_POINTER_MODE = 1,
    CUBLASLT_MATRIX_TRANSFORM_DESC_TRANSA = 2,
    CUBLASLT_MATRIX_TRANSFORM_DESC_TRANSB = 3,
}
extern "C" {
    pub fn cublasLtMatrixTransformDescInit_internal(
        transformDesc: cublasLtMatrixTransformDesc_t,
        size: usize,
        scaleType: cudaDataType,
    ) -> cublasStatus_t;
}
extern "C" {
    pub fn cublasLtMatrixTransformDescCreate(
        transformDesc: *mut cublasLtMatrixTransformDesc_t,
        scaleType: cudaDataType,
    ) -> cublasStatus_t;
}
extern "C" {
    pub fn cublasLtMatrixTransformDescDestroy(
        transformDesc: cublasLtMatrixTransformDesc_t,
    ) -> cublasStatus_t;
}
extern "C" {
    pub fn cublasLtMatrixTransformDescSetAttribute(
        transformDesc: cublasLtMatrixTransformDesc_t,
        attr: cublasLtMatrixTransformDescAttributes_t,
        buf: *const ::std::os::raw::c_void,
        sizeInBytes: usize,
    ) -> cublasStatus_t;
}
extern "C" {
    pub fn cublasLtMatrixTransformDescGetAttribute(
        transformDesc: cublasLtMatrixTransformDesc_t,
        attr: cublasLtMatrixTransformDescAttributes_t,
        buf: *mut ::std::os::raw::c_void,
        sizeInBytes: usize,
        sizeWritten: *mut usize,
    ) -> cublasStatus_t;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cublasLt3mMode_t {
    CUBLASLT_3M_MODE_DISALLOWED = 0,
    CUBLASLT_3M_MODE_ALLOWED = 1,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cublasLtReductionScheme_t {
    CUBLASLT_REDUCTION_SCHEME_NONE = 0,
    CUBLASLT_REDUCTION_SCHEME_INPLACE = 1,
    CUBLASLT_REDUCTION_SCHEME_COMPUTE_TYPE = 2,
    CUBLASLT_REDUCTION_SCHEME_OUTPUT_TYPE = 4,
    CUBLASLT_REDUCTION_SCHEME_MASK = 7,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cublasLtEpilogue_t {
    CUBLASLT_EPILOGUE_DEFAULT = 1,
    CUBLASLT_EPILOGUE_RELU = 2,
    CUBLASLT_EPILOGUE_RELU_AUX = 130,
    CUBLASLT_EPILOGUE_BIAS = 4,
    CUBLASLT_EPILOGUE_RELU_BIAS = 6,
    CUBLASLT_EPILOGUE_RELU_AUX_BIAS = 134,
    CUBLASLT_EPILOGUE_DRELU_BGRAD = 152,
    CUBLASLT_EPILOGUE_GELU = 32,
    CUBLASLT_EPILOGUE_GELU_AUX = 160,
    CUBLASLT_EPILOGUE_GELU_BIAS = 36,
    CUBLASLT_EPILOGUE_GELU_AUX_BIAS = 164,
    CUBLASLT_EPILOGUE_DGELU_BGRAD = 208,
    CUBLASLT_EPILOGUE_BGRADA = 256,
    CUBLASLT_EPILOGUE_BGRADB = 512,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cublasLtMatmulSearch_t {
    CUBLASLT_SEARCH_BEST_FIT = 0,
    CUBLASLT_SEARCH_LIMITED_BY_ALGO_ID = 1,
    CUBLASLT_SEARCH_RESERVED_02 = 2,
    CUBLASLT_SEARCH_RESERVED_03 = 3,
    CUBLASLT_SEARCH_RESERVED_04 = 4,
    CUBLASLT_SEARCH_RESERVED_05 = 5,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cublasLtMatmulPreferenceAttributes_t {
    CUBLASLT_MATMUL_PREF_SEARCH_MODE = 0,
    CUBLASLT_MATMUL_PREF_MAX_WORKSPACE_BYTES = 1,
    CUBLASLT_MATMUL_PREF_MATH_MODE_MASK = 2,
    CUBLASLT_MATMUL_PREF_REDUCTION_SCHEME_MASK = 3,
    CUBLASLT_MATMUL_PREF_GAUSSIAN_MODE_MASK = 4,
    CUBLASLT_MATMUL_PREF_MIN_ALIGNMENT_A_BYTES = 5,
    CUBLASLT_MATMUL_PREF_MIN_ALIGNMENT_B_BYTES = 6,
    CUBLASLT_MATMUL_PREF_MIN_ALIGNMENT_C_BYTES = 7,
    CUBLASLT_MATMUL_PREF_MIN_ALIGNMENT_D_BYTES = 8,
    CUBLASLT_MATMUL_PREF_MAX_WAVES_COUNT = 9,
    CUBLASLT_MATMUL_PREF_POINTER_MODE_MASK = 10,
    CUBLASLT_MATMUL_PREF_EPILOGUE_MASK = 11,
    CUBLASLT_MATMUL_PREF_IMPL_MASK = 12,
    CUBLASLT_MATMUL_PREF_SM_COUNT_TARGET = 13,
}
extern "C" {
    pub fn cublasLtMatmulPreferenceInit_internal(
        pref: cublasLtMatmulPreference_t,
        size: usize,
    ) -> cublasStatus_t;
}
extern "C" {
    pub fn cublasLtMatmulPreferenceCreate(pref: *mut cublasLtMatmulPreference_t) -> cublasStatus_t;
}
extern "C" {
    pub fn cublasLtMatmulPreferenceDestroy(pref: cublasLtMatmulPreference_t) -> cublasStatus_t;
}
extern "C" {
    pub fn cublasLtMatmulPreferenceSetAttribute(
        pref: cublasLtMatmulPreference_t,
        attr: cublasLtMatmulPreferenceAttributes_t,
        buf: *const ::std::os::raw::c_void,
        sizeInBytes: usize,
    ) -> cublasStatus_t;
}
extern "C" {
    pub fn cublasLtMatmulPreferenceGetAttribute(
        pref: cublasLtMatmulPreference_t,
        attr: cublasLtMatmulPreferenceAttributes_t,
        buf: *mut ::std::os::raw::c_void,
        sizeInBytes: usize,
        sizeWritten: *mut usize,
    ) -> cublasStatus_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cublasLtMatmulHeuristicResult_t {
    pub algo: cublasLtMatmulAlgo_t,
    pub workspaceSize: usize,
    pub state: cublasStatus_t,
    pub wavesCount: f32,
    pub reserved: [::std::os::raw::c_int; 4usize],
}
extern "C" {
    pub fn cublasLtMatmulAlgoGetHeuristic(
        lightHandle: cublasLtHandle_t,
        operationDesc: cublasLtMatmulDesc_t,
        Adesc: cublasLtMatrixLayout_t,
        Bdesc: cublasLtMatrixLayout_t,
        Cdesc: cublasLtMatrixLayout_t,
        Ddesc: cublasLtMatrixLayout_t,
        preference: cublasLtMatmulPreference_t,
        requestedAlgoCount: ::std::os::raw::c_int,
        heuristicResultsArray: *mut cublasLtMatmulHeuristicResult_t,
        returnAlgoCount: *mut ::std::os::raw::c_int,
    ) -> cublasStatus_t;
}
extern "C" {
    pub fn cublasLtMatmulAlgoGetIds(
        lightHandle: cublasLtHandle_t,
        computeType: cublasComputeType_t,
        scaleType: cudaDataType_t,
        Atype: cudaDataType_t,
        Btype: cudaDataType_t,
        Ctype: cudaDataType_t,
        Dtype: cudaDataType_t,
        requestedAlgoCount: ::std::os::raw::c_int,
        algoIdsArray: *mut ::std::os::raw::c_int,
        returnAlgoCount: *mut ::std::os::raw::c_int,
    ) -> cublasStatus_t;
}
extern "C" {
    pub fn cublasLtMatmulAlgoInit(
        lightHandle: cublasLtHandle_t,
        computeType: cublasComputeType_t,
        scaleType: cudaDataType_t,
        Atype: cudaDataType_t,
        Btype: cudaDataType_t,
        Ctype: cudaDataType_t,
        Dtype: cudaDataType_t,
        algoId: ::std::os::raw::c_int,
        algo: *mut cublasLtMatmulAlgo_t,
    ) -> cublasStatus_t;
}
extern "C" {
    pub fn cublasLtMatmulAlgoCheck(
        lightHandle: cublasLtHandle_t,
        operationDesc: cublasLtMatmulDesc_t,
        Adesc: cublasLtMatrixLayout_t,
        Bdesc: cublasLtMatrixLayout_t,
        Cdesc: cublasLtMatrixLayout_t,
        Ddesc: cublasLtMatrixLayout_t,
        algo: *const cublasLtMatmulAlgo_t,
        result: *mut cublasLtMatmulHeuristicResult_t,
    ) -> cublasStatus_t;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cublasLtMatmulAlgoCapAttributes_t {
    CUBLASLT_ALGO_CAP_SPLITK_SUPPORT = 0,
    CUBLASLT_ALGO_CAP_REDUCTION_SCHEME_MASK = 1,
    CUBLASLT_ALGO_CAP_CTA_SWIZZLING_SUPPORT = 2,
    CUBLASLT_ALGO_CAP_STRIDED_BATCH_SUPPORT = 3,
    CUBLASLT_ALGO_CAP_OUT_OF_PLACE_RESULT_SUPPORT = 4,
    CUBLASLT_ALGO_CAP_UPLO_SUPPORT = 5,
    CUBLASLT_ALGO_CAP_TILE_IDS = 6,
    CUBLASLT_ALGO_CAP_CUSTOM_OPTION_MAX = 7,
    CUBLASLT_ALGO_CAP_MATHMODE_IMPL = 8,
    CUBLASLT_ALGO_CAP_GAUSSIAN_IMPL = 9,
    CUBLASLT_ALGO_CAP_CUSTOM_MEMORY_ORDER = 10,
    CUBLASLT_ALGO_CAP_POINTER_MODE_MASK = 11,
    CUBLASLT_ALGO_CAP_EPILOGUE_MASK = 12,
    CUBLASLT_ALGO_CAP_STAGES_IDS = 13,
    CUBLASLT_ALGO_CAP_LD_NEGATIVE = 14,
    CUBLASLT_ALGO_CAP_NUMERICAL_IMPL_FLAGS = 15,
    CUBLASLT_ALGO_CAP_MIN_ALIGNMENT_A_BYTES = 16,
    CUBLASLT_ALGO_CAP_MIN_ALIGNMENT_B_BYTES = 17,
    CUBLASLT_ALGO_CAP_MIN_ALIGNMENT_C_BYTES = 18,
    CUBLASLT_ALGO_CAP_MIN_ALIGNMENT_D_BYTES = 19,
}
extern "C" {
    pub fn cublasLtMatmulAlgoCapGetAttribute(
        algo: *const cublasLtMatmulAlgo_t,
        attr: cublasLtMatmulAlgoCapAttributes_t,
        buf: *mut ::std::os::raw::c_void,
        sizeInBytes: usize,
        sizeWritten: *mut usize,
    ) -> cublasStatus_t;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cublasLtMatmulAlgoConfigAttributes_t {
    CUBLASLT_ALGO_CONFIG_ID = 0,
    CUBLASLT_ALGO_CONFIG_TILE_ID = 1,
    CUBLASLT_ALGO_CONFIG_SPLITK_NUM = 2,
    CUBLASLT_ALGO_CONFIG_REDUCTION_SCHEME = 3,
    CUBLASLT_ALGO_CONFIG_CTA_SWIZZLING = 4,
    CUBLASLT_ALGO_CONFIG_CUSTOM_OPTION = 5,
    CUBLASLT_ALGO_CONFIG_STAGES_ID = 6,
}
extern "C" {
    pub fn cublasLtMatmulAlgoConfigSetAttribute(
        algo: *mut cublasLtMatmulAlgo_t,
        attr: cublasLtMatmulAlgoConfigAttributes_t,
        buf: *const ::std::os::raw::c_void,
        sizeInBytes: usize,
    ) -> cublasStatus_t;
}
extern "C" {
    pub fn cublasLtMatmulAlgoConfigGetAttribute(
        algo: *const cublasLtMatmulAlgo_t,
        attr: cublasLtMatmulAlgoConfigAttributes_t,
        buf: *mut ::std::os::raw::c_void,
        sizeInBytes: usize,
        sizeWritten: *mut usize,
    ) -> cublasStatus_t;
}
pub type cublasLtLoggerCallback_t = ::std::option::Option<
    unsafe extern "C" fn(
        logLevel: ::std::os::raw::c_int,
        functionName: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn cublasLtLoggerSetCallback(callback: cublasLtLoggerCallback_t) -> cublasStatus_t;
}
extern "C" {
    pub fn cublasLtLoggerSetFile(file: *mut FILE) -> cublasStatus_t;
}
extern "C" {
    pub fn cublasLtLoggerOpenFile(logFile: *const ::std::os::raw::c_char) -> cublasStatus_t;
}
extern "C" {
    pub fn cublasLtLoggerSetLevel(level: ::std::os::raw::c_int) -> cublasStatus_t;
}
extern "C" {
    pub fn cublasLtLoggerSetMask(mask: ::std::os::raw::c_int) -> cublasStatus_t;
}
extern "C" {
    pub fn cublasLtLoggerForceDisable() -> cublasStatus_t;
}
